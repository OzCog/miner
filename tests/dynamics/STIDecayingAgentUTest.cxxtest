/*
 * tests/dynamics/STIDecayingAgentUTest.cxxtest
 *
 * Copyright (C) 2008 by Singularity Institute for Artificial Intelligence
 * All Rights Reserved
 *
 * Written by Gustavo Gama <gama@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/Node.h>
#include <opencog/dynamics/attention/STIDecayingAgent.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Config.h>

using namespace opencog;

class STIDecayingAgentUTest : public CxxTest::TestSuite
{

private:

public:

    STIDecayingAgentUTest() {}
    void setUp() {}
    void tearDown() {}

    void testSimple() {
        logger().setLevel(Logger::DEBUG);
        AttentionValue::sti_t min_sti = config().get_int("MIN_STI");

        AtomSpace *as = server().getAtomSpace();
        Handle h = as->addNode(WORD_NODE, "test");
        Node *node = dynamic_cast<Node*>(TLB::getAtom(h));
        node->setAttentionValue(*AttentionValue::factory((AttentionValue::sti_t) (min_sti + 5)));


        // first, ensure the node's sti is what it should
        h = as->getHandle(node->getType(), node->getName());
        TS_ASSERT(TLB::getAtom(h)->getAttentionValue().getSTI() == (min_sti + 5));

        CogServer& cogserver = static_cast<CogServer&>(server());
        cogserver.plugInMindAgent(new STIDecayingAgent(), 1);
        cogserver.unitTestServerLoop(5);

        // we're on the verge of removing the node; check if its sti equals
        // min_sti
        h = as->getHandle(node->getType(), node->getName());
        TS_ASSERT(TLB::getAtom(h)->getAttentionValue().getSTI() == min_sti);

        // run another cycle and check whether the atom has been removed
        cogserver.unitTestServerLoop(1);
        h = as->getHandle(node->getType(), node->getName());
        TS_ASSERT(TLB::isInvalidHandle(h));
    }
};
