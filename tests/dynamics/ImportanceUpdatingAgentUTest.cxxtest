/*
 * tests/dynamics/ImportanceUpdatingAgentUTest.cxxtest
 *
 * Copyright (C) 2008 by Singularity Institute for Artificial Intelligence
 * All Rights Reserved
 *
 * Written by Joel Pitt <joel@fruitionnz.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as 
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include "CogServer.h"
#include "MindAgent.h"
#include "ImportanceUpdatingAgent.h"
#include "SimpleTruthValue.h"

#include <vector>
#include <string>

using namespace opencog;

vector<Handle> createSimpleGraph(AtomSpace* atomSpace, const char* baseName)
{
    char buf[256];
    vector<Handle> testAtoms;
    int baseNameLength;

    memset(buf,0,256);
    baseNameLength = strlen(baseName);
    strcpy(buf,baseName);

    SimpleTruthValue tv1(0.001f, 0.00001f);
    SimpleTruthValue tv2(0.001f, 0.00001f);
    SimpleTruthValue tv3(0.5f, 0.99f);
    buf[baseNameLength] = '1';
    Handle h1 = atomSpace->addNode(CONCEPT_NODE, buf, tv1);
    buf[baseNameLength] = '2';
    Handle h2 = atomSpace->addNode(CONCEPT_NODE, buf, tv2);
    buf[baseNameLength] = '3';
    Handle h3 = atomSpace->addNode(CONCEPT_NODE, buf, tv3);

    HandleSeq outgoing1;
    outgoing1.push_back(h2);
    outgoing1.push_back(h3);
    Handle l1 = atomSpace->addLink(LIST_LINK, outgoing1, tv1);
    HandleSeq outgoing2;
    outgoing2.push_back(h1);
    outgoing2.push_back(l1);
    Handle l2 = atomSpace->addLink(EVALUATION_LINK, outgoing2, tv2);

    testAtoms.push_back(h1);
    testAtoms.push_back(h2);
    testAtoms.push_back(h3);
    testAtoms.push_back(l1);
    testAtoms.push_back(l2);

    return testAtoms;
}

class ImportanceUpdatingAgentUTest :  public CxxTest::TestSuite {

    private:

    public:

	ImportanceUpdatingAgentUTest(){}

	void setUp() {}

	void tearDown(){}

	void testRun() {
	    opencog::ImportanceUpdatingAgent *agent;
	    opencog::CogServer server;

	    agent = new opencog::ImportanceUpdatingAgent();

	    agent->getLogger()->enable();
	    agent->getLogger()->setLevel(opencog::Logger::FINE);
	    agent->getLogger()->setPrintToStdoutFlag(true);
	    
	    server.plugInMindAgent(agent, 1);
	    createSimpleGraph(server.getAtomSpace(), "import-update");

	    printf("Running agent without noise\n");
	    server.unitTestServerLoop(20);
	    
	    // Check AtomSpace funds within bounds
	    TS_ASSERT_LESS_THAN_EQUALS( agent->acceptableLobeSTIRange[0], \
		    server.getAtomSpace()->getSTIFunds());
	    TS_ASSERT_LESS_THAN_EQUALS(server.getAtomSpace()->getSTIFunds(), \
		    agent->acceptableLobeSTIRange[1]);
	    TS_ASSERT_LESS_THAN_EQUALS( agent->acceptableLobeLTIRange[0], \
		    server.getAtomSpace()->getLTIFunds());
	    TS_ASSERT_LESS_THAN_EQUALS(server.getAtomSpace()->getLTIFunds(), \
		    agent->acceptableLobeLTIRange[1]);

	    // erase the log file if no assertions failed
	    if (!CxxTest::TestTracker::tracker().suiteFailed())
		std::remove(agent->getLogger()->getFilename().c_str());
	    delete agent;
	}

	void testNoise() {
	    opencog::ImportanceUpdatingAgent *agent;
	    opencog::CogServer server;

	    agent = new opencog::ImportanceUpdatingAgent();

	    agent->getLogger()->enable();
	    agent->getLogger()->setLevel(opencog::Logger::FINE);
	    agent->getLogger()->setPrintToStdoutFlag(true);
	    
	    server.plugInMindAgent(agent, 1);
	    createSimpleGraph(server.getAtomSpace(), "import-update");

	    printf("Running agent with noise\n");
	    agent->setNoiseFlag(true);
	    server.unitTestServerLoop(20);

	    // Check AtomSpace funds within bounds
	    TS_ASSERT_LESS_THAN_EQUALS( agent->acceptableLobeSTIRange[0], \
		    server.getAtomSpace()->getSTIFunds());
	    TS_ASSERT_LESS_THAN_EQUALS(server.getAtomSpace()->getSTIFunds(), \
		    agent->acceptableLobeSTIRange[1]);
	    TS_ASSERT_LESS_THAN_EQUALS( agent->acceptableLobeLTIRange[0], \
		    server.getAtomSpace()->getLTIFunds());
	    TS_ASSERT_LESS_THAN_EQUALS(server.getAtomSpace()->getLTIFunds(), \
		    agent->acceptableLobeLTIRange[1]);

	    // erase the log file if no assertions failed
	    if (!CxxTest::TestTracker::tracker().suiteFailed())
		std::remove(agent->getLogger()->getFilename().c_str());
	    delete agent;
	}

	void testNoLinks() {
	    opencog::ImportanceUpdatingAgent *agent;
	    opencog::CogServer server;

	    agent = new opencog::ImportanceUpdatingAgent();

	    agent->getLogger()->enable();
	    agent->getLogger()->setLevel(opencog::Logger::FINE);
	    agent->getLogger()->setPrintToStdoutFlag(true);
	    
	    server.plugInMindAgent(agent, 1);
	    createSimpleGraph(server.getAtomSpace(), "import-update");

	    printf("Running agent excluding links\n");
	    agent->setUpdateLinksFlag(false);
	    server.unitTestServerLoop(10);

	    printf("Running agent excluding links, with noise\n");
	    agent->setNoiseFlag(true);
	    server.unitTestServerLoop(20);

	    // Check AtomSpace funds within bounds
	    TS_ASSERT_LESS_THAN_EQUALS( agent->acceptableLobeSTIRange[0], \
		    server.getAtomSpace()->getSTIFunds());
	    TS_ASSERT_LESS_THAN_EQUALS(server.getAtomSpace()->getSTIFunds(), \
		    agent->acceptableLobeSTIRange[1]);
	    TS_ASSERT_LESS_THAN_EQUALS( agent->acceptableLobeLTIRange[0], \
		    server.getAtomSpace()->getLTIFunds());
	    TS_ASSERT_LESS_THAN_EQUALS(server.getAtomSpace()->getLTIFunds(), \
		    agent->acceptableLobeLTIRange[1]);

	    // erase the log file if no assertions failed
	    if (!CxxTest::TestTracker::tracker().suiteFailed())
		std::remove(agent->getLogger()->getFilename().c_str());
	    delete agent;
	}
};
