/*
 * ./test/Util/ConfigUTest.cxxtest
 *
 * Copyright (c) 2008 OpenCog.org
 */

#include <iostream>
#include <fstream>
#include <cstdio>
#include <Config.h>
#include <exceptions.h>

using namespace opencog;

class ConfigUTest : public CxxTest::TestSuite {

public: 
    ConfigUTest() {}
    void setUp() {}
    void tearDown() {}

    void testDefault() {
        TS_ASSERT_THROWS(config()["INVALID_PARAM"], InvalidParamException&);
        TS_ASSERT(config()["SERVER_PORT"] == "17001");
        TS_ASSERT(config().get_int("SERVER_PORT") == 17001);
        TS_ASSERT(config().get_double("SERVER_PORT") == 17001.0);
        TS_ASSERT(config().get_bool("LOG_TO_STDOUT"));
        TS_ASSERT(config().get_int("IDLE_CYCLES_PER_TICK") == 3);
        TS_ASSERT(config().get_int("STARTING_STI_FUNDS") == 1000);
        TS_ASSERT(config().get_int("STARTING_LTI_FUNDS") == 1000);
        TS_ASSERT(config().get_int("STI_FUNDS_BUFFER") == 200);
        TS_ASSERT(config().get_int("LTI_FUNDS_BUFFER") == 200);
    }

    void testLoadFromFile() {
        // first, write the configuration file
        const char *config_file_name = "ConfigUTest.config";
        std::ofstream out(config_file_name);
        out << "# ConfigUTest file; commented initial line\n";
        out << "    	# Another comment line with blank prefix\n";
        out << " PARAM1 = VALUE1\n";
        out << "    PARAM2 	  = 	  VALUE2   \n";
        out << "PARAM3=VALUE3\n";
        out << "COMPOSED PARAMETER NAME 4 = VALUE4\n";
        out << "# another comment, just for kicks\n";
        out << "PARAM5 =  COMPOSED PARAMETER VALUE 5 \n";
        out << "PARAM6 = VALUE6  # end of line comments\n";
        out << "  PARAM7		=  248 # integer parameter\n";
        out << "PARAM8		=1.2584 # double parameter\n";
        out << "PARAM9=   -29847.167015 $&@*a786A!$alk # double parameter and useless discarded extra characters\n";
        out << "STI_FUNDS_BUFFER = 200\n";
        out << "LTI_FUNDS_BUFFER = 10\n";
        out << "LOG_TO_STDOUT    = false\n";
        out.close();

        // check default parameters before and after loading file
        TS_ASSERT(config().get_int("STI_FUNDS_BUFFER") == 200);
        TS_ASSERT(config().get_int("LTI_FUNDS_BUFFER") == 200);
        config().load(config_file_name);
        TS_ASSERT(config().get_int("STI_FUNDS_BUFFER") == 200);
        TS_ASSERT(config().get_int("LTI_FUNDS_BUFFER") == 10);
        TS_ASSERT(!config().get_bool("LOG_TO_STDOUT"));

        // check remaining parameters from file
        TS_ASSERT(config().get("PARAM1") == "VALUE1");
        TS_ASSERT(config()["PARAM2"] == "VALUE2");
        TS_ASSERT(config()["PARAM3"] == "VALUE3");
        TS_ASSERT(config()["COMPOSED PARAMETER NAME 4"] == "VALUE4");
        TS_ASSERT(config()["PARAM5"] == "COMPOSED PARAMETER VALUE 5");
        TS_ASSERT(config()["PARAM6"] == "VALUE6");
        TS_ASSERT(config().get_int("PARAM7") == 248);
        TS_ASSERT(config().get_double("PARAM8") == 1.2584);
        TS_ASSERT(config().get_double("PARAM9") == -29847.167015);

        // finally, remove the temporary file and free the string with its name
        std::remove(config_file_name);
    }
}; // class
