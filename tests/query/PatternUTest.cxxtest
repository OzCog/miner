/*
 * tests/server/PatternUTest.cxxtest
 *
 * Copyright (C) 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/Link.h>
#include <opencog/atomspace/Node.h>
#include <opencog/query/PatternMatch.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class PatternUTest :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;
		Handle hconst;
		Handle hsoln_a;
		Handle hsoln_b;
		Handle hsoln_c;

		Handle hpred_a;
		Handle hpred_b;
		Handle hpred_c;

		Handle hitem_1;
		Handle hitem_2;
		Handle hitem_3;
		Handle hlist;
		Handle hprnode;
		Handle hoc;

	public:

		PatternUTest(void)
		{
			logger().setLevel(Logger::DEBUG);
			logger().setPrintToStdoutFlag(true);
		}

		~PatternUTest()
		{
			// erase the log file if no assertions failed
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);

		void tearDown(void) { }

		void test_simple_link(void);
		void test_two_links(void);
		void test_eval(void);
};

class PMCB : public PatternMatchCallback
{
	public:
		PMCB(void);
		virtual bool node_match(Atom *, Atom *);
		virtual bool solution(std::map<Handle, Handle> &pred_soln,
                            std::map<Handle, Handle> &var_soln);

		int found;
		std::map<Handle, Handle> preds;
		std::map<Handle, Handle> vars;
};

PMCB::PMCB(void)
{
	found = 0;
}

bool PMCB::node_match(Atom *a, Atom *b)
{
	Handle ha = TLB::getHandle(a);
	Handle hb = TLB::getHandle(b);
	logger().debug("Compare nodes %lu %lu\n", ha.value(), hb.value());
	return false;
}

bool PMCB::solution(std::map<Handle, Handle> &pred_soln,
                    std::map<Handle, Handle> &var_soln)
{
	found ++;
	preds = pred_soln;
	vars = var_soln;
	return false;
}

void PatternUTest::setUp(void)
{
	CogServer& cogserver = static_cast<CogServer&>(server());
	as = cogserver.getAtomSpace();

	// create a gnarly graph
	Node ncon(CONCEPT_NODE, "some const concept node");
	hconst = as->addRealAtom(ncon);

	Node na(CONCEPT_NODE, "desired solution concept node a");
	hsoln_a = as->addRealAtom(na);

	Node nb(CONCEPT_NODE, "desired solution concept node b");
	hsoln_b = as->addRealAtom(nb);

	Node nc(CONCEPT_NODE, "desired solution concept node c");
	hsoln_c = as->addRealAtom(nc);

	Link la(INHERITANCE_LINK, hconst, hsoln_a);
	hpred_a = as->addRealAtom(la);

	Link lb(LIST_LINK, hconst, hsoln_b);
	hpred_b = as->addRealAtom(lb);

	Link lc(LIST_LINK, hconst, hsoln_c);
	hpred_c = as->addRealAtom(lc);

	// create a confounding link, like above, but different
	Node nbw(CONCEPT_NODE, "incorrect solution concept node");
	Handle hwrong = as->addRealAtom(nbw);

	Link ldw(ASSOCIATIVE_LINK, hconst, hwrong);
	as->addRealAtom(ldw);

	// Create a standard-format opencog predicate
	Node n1(CONCEPT_NODE, "concept kanjiru 1");
	hitem_1 = as->addRealAtom(n1);
	Node n2(CONCEPT_NODE, "concept kangaeru 2");
	hitem_2 = as->addRealAtom(n2);
	Node n3(CONCEPT_NODE, "concept nihongo 3");
	hitem_3 = as->addRealAtom(n3);

	Link pl(LIST_LINK, hitem_1, hitem_2, hitem_3);
	hlist = as->addRealAtom(pl);

	Node pr(PREDICATE_NODE, "relationship blaupunkt");
	hprnode = as->addRealAtom(pr);

	Link pe(EVALUATION_LINK, hprnode, hlist);
	hoc = as->addRealAtom(pe);
}

void PatternUTest::test_simple_link(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	PatternMatch *pm = new PatternMatch();
	pm->set_atomspace(as);

	// Define the pattern to match against.
	Node nvar(VARIABLE_NODE, "variable node");
	Handle hvar = as->addRealAtom(nvar);

	Link le(INHERITANCE_LINK, hconst, hvar);
	Handle he = as->addRealAtom(le);

	std::vector<Handle> vars;
	vars.push_back(hvar);

	std::vector<Handle> preds;
	preds.push_back(he);

	PMCB pmcb;
	pm->match(&pmcb, &preds, &vars);

	// Should find only one solution.
	TSM_ASSERT("wrong number of solutions", pmcb.found == 1);
	TSM_ASSERT("incorrect solution", hsoln_a == pmcb.vars[hvar]);
	TSM_ASSERT("incorrect predicate", hpred_a == pmcb.preds[he]);

	// Remove garbage, just in case ... 
	as->removeAtom(he);
	as->removeAtom(hvar);
	delete pm;
	logger().debug("END TEST: %s", __FUNCTION__);
}

void PatternUTest::test_two_links(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	PatternMatch *pm = new PatternMatch();
	pm->set_atomspace(as);

	// Define the pattern to match against.
	Node nx(VARIABLE_NODE, "variable node x");
	Handle hx = as->addRealAtom(nx);

	Node ny(VARIABLE_NODE, "variable node y");
	Handle hy = as->addRealAtom(ny);

	Link lx(LIST_LINK, hconst, hx);
	Handle hlx = as->addRealAtom(lx);

	Link ly(LIST_LINK, hconst, hy);
	Handle hly = as->addRealAtom(ly);

	std::vector<Handle> vars;
	vars.push_back(hx);
	vars.push_back(hy);

	std::vector<Handle> preds;
	preds.push_back(hlx);
	preds.push_back(hly);

	PMCB pmcb;
	pm->match(&pmcb, &preds, &vars);

	// Should find four solutions:
	// var_x = soln_b and var_y = soln_b
	// var_x = soln_b and var_y = soln_c
	// var_x = soln_c and var_y = soln_b
	// var_x = soln_c and var_y = soln_c
	TSM_ASSERT("wrong number of solutions", pmcb.found == 4);
	// TSM_ASSERT("incorrect solution", hsoln_b == pmcb.vars[hx]);
	// TSM_ASSERT("incorrect predicate", hpred_b == pmcb.preds[hlx]);

	delete pm;
	logger().debug("END TEST: %s", __FUNCTION__);
}

void PatternUTest::test_eval(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);
	PatternMatch *pm = new PatternMatch();
	pm->set_atomspace(as);

	// Create a standard-format opencog predicate
	Node n1(CONCEPT_NODE, "concept kanjiru 1");
	Handle h1 = as->addRealAtom(n1);
	Node n2(VARIABLE_NODE, "concept variable");
	Handle h2 = as->addRealAtom(n2);
	Node n3(CONCEPT_NODE, "concept nihongo 3");
	Handle h3 = as->addRealAtom(n3);

	Link pl(LIST_LINK, h1, h2, h3);
	Handle hl = as->addRealAtom(pl);

	Node pr(VARIABLE_NODE, "relationship variable");
	Handle hprn = as->addRealAtom(pr);

	Link pe(EVALUATION_LINK, hprn, hl);
	Handle he = as->addRealAtom(pe);

	std::vector<Handle> vars;
	vars.push_back(hprn);
	vars.push_back(h2);

	std::vector<Handle> preds;
	preds.push_back(he);

	PMCB pmcb;
	pm->match(&pmcb, &preds, &vars);

	// Should find one solution
	TSM_ASSERT("wrong number of solutions", pmcb.found == 1);
	TSM_ASSERT("incorrect solution", hitem_2 == pmcb.vars[h2]);
	TSM_ASSERT("incorrect pr-node", hprnode == pmcb.vars[hprn]);
	TSM_ASSERT("incorrect predicate", hoc == pmcb.preds[he]);

	delete pm;
	logger().debug("END TEST: %s", __FUNCTION__);
}

