/**
 * LinkUTest.cxxtest
 *
 * Author: Welter
 */
#include <Node.h>
#include <Link.h>

class LinkUTest :  public CxxTest::TestSuite {
private:

public:
	LinkUTest(){
           printf("sizeof(Trail) = %u\n", sizeof(Trail));
	}

    void setUp() {
    }

    void tearDown(){
    }

	void testEquals(){
        Node* n1 = new Node(CONCEPT_NODE, "TEST");
        Node* n2 = new Node(CONCEPT_NODE, "TEST");
        std::vector<Handle> out1;
        Link* l1 = new Link(LIST_LINK, out1);
        Link* l2 = new Link(LIST_LINK, out1);
        TS_ASSERT(l1->getArity() == 0);
        TS_ASSERT(l2->getArity() == 0);

        std::vector<Handle> out2;
        out2.push_back(n1);
        Link* l3 = new Link(LIST_LINK, out2);
        Link* l4 = new Link(LIST_LINK, out2);
        Link* l5 = new Link(INHERITANCE_LINK, out2);
        Link* l6 = new Link(INHERITANCE_LINK, out2);
        TS_ASSERT(l3->getArity() == 1);
        TS_ASSERT(l4->getArity() == 1);
        TS_ASSERT(l5->getArity() == 1);
        TS_ASSERT(l6->getArity() == 1);

        std::vector<Handle> out3;
        out3.push_back(n1);
        out3.push_back(n2);
        Link* l7 = new Link(INHERITANCE_LINK, out3);
        Link* l8 = new Link(INHERITANCE_LINK, out3);
        TS_ASSERT(l7->getArity() == 2);
        TS_ASSERT(l8->getArity() == 2);

        TS_ASSERT(l1->equals(l2));
        TS_ASSERT(l3->equals(l4));
        TS_ASSERT(l5->equals(l6));
        TS_ASSERT(l7->equals(l8));
        
        TS_ASSERT(!l1->equals(l3));
        TS_ASSERT(!l1->equals(l4));
        TS_ASSERT(!l1->equals(l5));
        TS_ASSERT(!l1->equals(l6));
        TS_ASSERT(!l1->equals(l7));
        TS_ASSERT(!l1->equals(l8));

        TS_ASSERT(!l3->equals(l1));
        TS_ASSERT(!l3->equals(l2));
        TS_ASSERT(!l3->equals(l5));
        TS_ASSERT(!l3->equals(l6));
        TS_ASSERT(!l3->equals(l7));
        TS_ASSERT(!l3->equals(l8));

        TS_ASSERT(!l5->equals(l1));
        TS_ASSERT(!l5->equals(l2));
        TS_ASSERT(!l5->equals(l3));
        TS_ASSERT(!l5->equals(l4));
        TS_ASSERT(!l5->equals(l7));
        TS_ASSERT(!l5->equals(l8));

        TS_ASSERT(!l7->equals(l1));
        TS_ASSERT(!l7->equals(l2));
        TS_ASSERT(!l7->equals(l3));
        TS_ASSERT(!l7->equals(l4));
        TS_ASSERT(!l7->equals(l5));
        TS_ASSERT(!l7->equals(l6));
        
    }
    
};
