/**
 * StringTokenizerUTest
 *
 * Author: Carlos Lopes
 * Copyright(c), 2007
 */
#include "StringTokenizer.h"
using namespace Util;

static const std::string toTokenizer = "this is a common phrase";
static const std::string delimiter = " ";
static const std::string words [] = {"this", "is", "a", "common", "phrase"};

class StringTokenizerUTest : public CxxTest::TestSuite{

	
public:
	void setUp(){
		// TODO: Implement setUp() function.
	}

	void tearDown()	{
		// TODO: Implement tearDown() function.
	}

	void testNextToken()
	{	
		StringTokenizer st(toTokenizer, delimiter);
		std::string result = st.nextToken(); 
		int i = 0;
		
		while (result != ""){
			printf("word: %s, result: %s\n", words[i].c_str(), result.c_str());
			TS_ASSERT(words[i] == result);
			result = st.nextToken();
			i++;
		}
		
		printf("%d\n", i);
		TS_ASSERT(i == 5); 
	}

	void testOutOfRangeCase()
	{
		// This test is for a specific case that was causing std::out_of_range when delimiter was present at the end of the string.  
                const std::string failingText = "this is a common ";
		StringTokenizer st(failingText, delimiter);
		st.nextToken(); 
		st.nextToken(); 
		st.nextToken(); 
		st.nextToken(); 
		TS_ASSERT(st.nextToken() == ""); 
		TS_ASSERT(st.nextToken() == ""); 
                const std::string failingText2 = "   ";
		StringTokenizer st2(failingText2, delimiter);
		TS_ASSERT(st2.nextToken() == ""); 
		TS_ASSERT(st2.nextToken() == ""); 
	}
};

