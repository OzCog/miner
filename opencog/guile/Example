
                   Example Usage
                   -------------

Below follows some examples for using scheme within Opencog.
The scheme shell itself is reachable through the opencog shell.
Thus:
-- start the opencog server
-- telnet localhost 17001   # to get to the opencog shell
-- opencog> scm     # to enter the scheme shell

At this point, generic scheme expressions can be entered.

Example: Importing Data
-----------------------
Consider the following OpenCog XML:

<InheritanceLink strength=".98" confidence=".99">
       <Element class="ConceptNode" name="famous"/>
       <Element class="ConceptNode" name="artist"/>
</InheritanceLink>
<ExtensionalImplicationLink strength=".99" confidence=".99">
       <Element class="ConceptNode" name="Muhammad"/>
       <Element class="ConceptNode" name="artist"/>
</ExtensionalImplicationLink>
<ExtensionalImplicationLink strength=".99" confidence=".99">
      <Element class="ConceptNode" name="Britney"/>
      <Element class="ConceptNode" name="artist"/>
</ExtensionalImplicationLink>

This can be represented in scheme several different ways.
The most direct (but not the prettiest) way is as follows:

(cog-new-link 'InheritanceLink (cog-new-stv 0.98 0.99)
	(cog-new-node 'ConceptNode "famous")
	(cog-new-node 'ConceptNode "artist"))

(cog-new-link 'ExtensionalImplicationLink (cog-new-stv 0.99 0.99)
	(cog-new-node 'ConceptNode "Muhammad")
	(cog-new-node 'ConceptNode "artist"))

(cog-new-link 'ExtensionalImplicationLink (cog-new-stv 0.99 0.99)
	(cog-new-node 'ConceptNode "Britney")
	(cog-new-node 'ConceptNode "artist"))

Enter the above at the scheme shell prompt, and then exit the shell 
(with a single '.' followed by newline).  Then, at the opencog shell,
type 'ls'; this will reveal what was created.

The above can be prettied up with some "syntactic sugar."
First, define some wrapper functions (these can be found in
"src/atomspace/type_constructors.scm" and are automatically 
generated from the atoms listed in "type.script") 

(define (stv x y) (cog-new-stv x y))
(define (ConceptNode . x) 
	(apply cog-new-node (append (list 'ConceptNode) x)))
(define (InheritanceLink . x) 
	(apply cog-new-link (append (list 'InheritanceLink) x)))
(define (ExtensionalImplicationLink . x) 
	(apply cog-new-link (append (list 'ExtensionalImplicationLink) x)))

After the above, the rather sweeter form is possible:

(InheritanceLink (stv 0.98 0.99)
	(ConceptNode "famous")
	(ConceptNode "artist"))

(ExtensionalImplicationLink (stv 0.99 0.99)
	(ConceptNode "Muhammad")
	(ConceptNode "artist"))

(ExtensionalImplicationLink (stv 0.99 0.99)
	(ConceptNode "Britney")
	(ConceptNode "artist"))


The simple truth values can appear either before, or after the nodes, 
thus:

(ExtensionalImplicationLink 
	(ConceptNode "Britney")
	(ConceptNode "artist")
	(stv 0.99 0.99))

will also work.
