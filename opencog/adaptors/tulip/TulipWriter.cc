#include "TulipWriter.h"
#include <CogServer.h>

#include <time.h>
#include <sstream>

namespace opencog {

bool TulipWriter::write(Handle seed, int depth)
{
    AtomSpace* a = CogServer::getAtomSpace();
    myfile.open( filename.c_str() );
    // Write header
    //
    myfile << "(tlp \"2.0\"" << endl;
    myfile << "(date \"" << getDateString() << "\")" << endl;
    myfile << "(comments \"This file was generated by OpenCog "
        "( http://opencog.org/ ).\")" << endl;

    HandleSeq nodeHandles;
    a->getHandleSet(back_inserter(nodeHandles), (Type) NODE, true );
    HandleSeq linkHandles;
    a->getHandleSet(back_inserter(linkHandles), (Type) LINK, true );

    // Output Node numbers/ids
    myfile << "(nodes ";
    foreach (Handle h, nodeHandles) {
        myfile << h << " ";
    }
    myfile << ")" << endl;

    // Output Edge numbers/ids, source, and target
    foreach (Handle h, linkHandles) {
        myfile << "(edge " << h << " ";
        foreach (Handle t, a->getOutgoing(h)) {
            myfile << t << " ";
        }
        myfile << ")" << endl;
    }

    // Output node names
    myfile << "(property  0 string \"viewLabel\" " << endl;
    myfile << "  (default \"\" \"\" )" << endl;

    foreach (Handle h, nodeHandles) {
        myfile << "  (node " << h << " \"" << a->getName(h) << "\")" << endl;
    }
    myfile << ")" << endl;

    // Define default colouring
    myfile << "(property  0 color \"viewColor\"" << endl;
    myfile << "(default \"(235,0,23,255)\" \"(0,0,0,128)\" )" << endl;
    myfile << ")" << endl;

    // Output strength component of truth value
    myfile << "(property  0 double \"strength\"" << endl;
    myfile << "(default \"0.0\" \"0.0\" )" << endl;
    foreach (Handle h, nodeHandles) {
        myfile << "  (node " << h << " \"" << a->getTV(h).getMean() << "\")" << endl;
    }
    foreach (Handle h, linkHandles) {
        myfile << "  (edge " << h << " \"" << a->getTV(h).getMean() << "\")" << endl;
    }
    myfile << ")" << endl;

    // Output count component of truth value
    myfile << "(property  0 double \"count\"" << endl;
    myfile << "(default \"0.0\" \"0.0\" )" << endl;
    foreach (Handle h, nodeHandles) {
        myfile << "  (node " << h << " \"" << a->getTV(h).getCount() << "\")" << endl;
    }
    foreach (Handle h, linkHandles) {
        myfile << "  (edge " << h << " \"" << a->getTV(h).getCount() << "\")" << endl;
    }
    myfile << ")" << endl;
   
    // Close header
    myfile << ")" << endl;
    myfile.close();

    return true;
}

std::string TulipWriter::getDateString()
{
    time_t rawtime;
    struct tm * timeinfo;
    ostringstream datestr;

    time ( &rawtime );
    timeinfo = localtime ( &rawtime );
    datestr << timeinfo->tm_mday << "-";
    datestr << timeinfo->tm_mon+1 << "-";
    datestr << timeinfo->tm_year + 1900 << "-";
    return datestr.str();

}

} // namespace opencog
