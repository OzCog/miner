
                       Overview
                       --------

The CogServer provides a simple network sehll server interface to the 
various functions in the opencog system.

To acess the shell server, build everything and execute 
bin/src/CogServer/cogServer.  From another terminal, run 
"telnet localhost 17001"; this will connect to the shell.
Alternately, "netcat localhost 17001" can be used. Long or
complex sequences of commands may be loaded by saying
"cat somefile | telnet localhost 17001" 

The main command dispatcher is implemented in CommandRequestProcessor.cc
This command dispatcher understands various commands, such as loading
data from XML files, loading and saving to SQL.  Type "help" at the
shell prompt to get a listing of the commands.

The server also includes a full scheme (guile) interpreter, 
allowing generic scripting to be done. See the README in the
src/guile directory for more info, and src/scm for various 
scriptlets.

Creating Loadable Modules
-------------------------
Loadable modules are shared libraries that implement some function. The
"loadmodule" command in to cogserver command processor will load a module.

Modules can be automatically loaded on server startup by modifying the 
lib/opencopg.conf file, and adding the module name to the list therein.

Loadable modules will typically need to expose new commands. There are two 
ways of doing this: either by using DECLARE_CMD_REQUEST or by using the
GenericShell class.  When only a small number of new commands are needed, 
then DECLARE_CMD_REQUEST macro provides the simplest, easiest interface to
add these commands. However, if the module requires a large number of
commands, or if these commands have a complex syntax, then the GenericShell
should be used.  The GenericShell bypasses OpenCog's command processor, 
and passes input data over to a generic "eval()" method, which is then free
to interprete the input in any way.

ToDo/Bugs:
----------
* There is curently no job scheduling whatsoever, and no standardized
  input-queue polling. Thus, all routines that look for input need to
  poll, yet they also must minimize cpu overhead, to avoid blocking 
  the command-line processor.   Heavy cpu use must be done in its
  own threads.

* The load-file.c will load a scheme file on startup; however, the
  way it uses file paths is unsatisfactory.  This needs to be fixed.

* Need to document how module loading actually works.



