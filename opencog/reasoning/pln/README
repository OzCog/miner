= Probabilisitic Logic Networks Technical Implementation Notes

Original version by Ari A. Heljakka. October 6th, 2006.

Port to OpenCog, refactoring, polish and shine by Joel Pitt, Jun.-Nov. 2008.

The implementation is based on the PLN book chapter "Designing a Practical PLN
Inference Engine"[1].

Classes
- Class Formula takes TVs as inputs and returns a TV.
- Class Rule inputs Vertexes (Handles) and returns a Vertex (Handle)
- Class BITNodeRoot is the main class of the backward chainer

A Vertex is a boost::variant which can be an atom type or a Handle. They are
also the node type of vtrees (Vertex trees).

A hypothesis can be represented as either an atom with confidence=0.0f, or as
embedded in a HypotheticalLink. The former approach is better in general (why is
this? I'm not sure...).

[1] Goertzel, B., Ikl√©, M., Goertzel, I.F., Heljakka, A. 2008. Probabilistic
Logic Networks: A Comprehensive Framework for Uncertain Inference.

== Normalization

For PLN, AtomSpaceWrapper is used to buffer the insertions to the AtomSpace.

AtomSpaceWrapper takes care of normalizing atoms. Currently these normalizations
are used:

--- EquivalenceLinks are converted into 2 ImplicationLinks.
--- ForAll(List, And(A1, A2, ...)) is converted to ForAll(List, A1),
    ForAll(List, A2), ...

== Quantifiers

ForAll formulas should have the TruthValue (TV) at the ForAllLink, not inside
it. It's internal ListLink must be there but its contents are not used.

ForAll(List, Implication(And(A1,A2,...,An)), Pat1)<tv1>

will be converted to RewritingRules of the form "if you need to produce Pat1,
then it's sufficient to produce A1,A2,...,An. The conversion is only made
if tv1.confidence>=0.99 (ANDFormula will eventually be applied to produced
atoms to forward-compute the TV). This approach should only be used for
purely Boolean rewriting, i.e. Boolean theorems.

Skolemization (conversion of premises with variables to be encompassed by a
ForAll quantifier) is requred of axioms. Results of inference currently don't
create atoms with a Skolemized form but when it does, this process should be automated.

== Screencasts explaining code details

Ari gratiously put together a few videos explaining aspects of the code. Note
that these refer to a particular snapshot of the code a while ago, so some of it
may have changed. In particular the MPUnify methods need to be unified
(ironically).

http://www.dreambroker.fi/w/6ac7926ef - High level overview of PLN files.
http://www.dreambroker.fi/w/1786cbe13 - BackInferenceTreeNodes.
http://www.dreambroker.fi/w/2e990eb8fa - MPUnify methods, substitute variable
methods, TableGather::gather method.

== TODO

There are a lot of potential design changes that it'd be nice to make, as well
as other quite important tasks.

=== Important

* get all tests in Tester.cc functioning.
* unify the unify methods: MPUnify1, MPUnifyVector, MPUnifyHandle -> MPUnify
* fix memory leak in BITNode::EvaluateWith ... new RuleApp is not freed (but
freeing causes a SegFault).
* remove the atom class and replace with vtree.
* Make PLN a loadable module
* Register PLN atoms types with the new ClassServer on module load
* Merge PLN shell requests into the CogServer Request processor.

=== Moderate

* remove all the temporary hacks in the haxx:: namespace
* Split Rules in inheriting from a GeneratorRule or ComposerRule class.
 Generators create atoms but don't require input atoms.
   This includes ForAll atoms in XML axiom sets are loaded into separate
   CrispuUnificationRule objects. They are Generators. Other generators include
   direct lookup, remote lookup, and hypothesis generation.
 Composers produce atoms from input.
   
* Allow PLN to use general OpenCog XML loader instead of it's own special one.
Either by modifying the OpenCog loader or by converting the PLN xml data files
to the OpenCog format. PLN currently loads atoms using its internal XML loader
written by Ari (at reasoning/pln/util). The functionality of PLN XML loader is
limited: eg. it does not allow ! or ? marks (or comments, IIRC).
* Related to the above. Provide a filter system to the OpenCog XML Loader... so
that the normalisation that the NormalisingATW used to do, can still be done as
a filter/translator. Also, provide a normalisingAgent... for dynamic changes to
the atomspace that come from other modules rather than an XML file.

=== Nice to have
