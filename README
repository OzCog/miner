
                          OpenCog
                          -------

OpenCog is a general-purpose reasoning system.
It currently consists of only the barest of essentials.

Prerequisites:
--------------
To build and run OpenCog, the following pacakges are required. With a
few exceptions, most Linux distributions will have these packages.

cmake       -- a build management tool
               http://www.cmake.org/
               Debian/Ubuntu package cmake

cxxtest     -- a test framework
               http://cxxtest.sourceforge.net/
               (Not available in Debian/Ubuntu, must be downloaded)

boost       -- a C++ utilities package -
               http://www.boost.org/
               Debian/Ubuntu package libboost-dev

C++ Sockets -- a cross-platform C++ TCP/IP sockets wrapper 
               http://www.alhem.net/Sockets/
               (Not available in Debian/Ubuntu, must be downloaded)

expat       -- an XML parsing library - 
               http://www.jclark.com/xml/expat.html (version 1.2)
               Debian/Ubuntu package libxmltok1-dev (supplies expat v1.2)
               Version 2 seems to work as well.  http://expat.sourceforge.net/

guile       -- Embedded scheme interperter
               http://www.gnu.org/software/guile/guile.html
               Debian/Ubuntu package guile-1.8-dev

iodbc       -- Generic SQL Database client access libraries
               http://www.iodbc.org/
               Debian/Ubuntu packages iodbc-dev or unixodbc-dev

openssl     -- SSL sockets library 
               Debian/Ubuntu package libssl-dev


To build opencog:
-----------------
cd to project root dir
mkdir bin
cd bin
cmake ..
make

libs will be built into each src subdirectory.

Unit tests:
-----------
To build and run the unit tests, from the bin directory enter (after building
opencog as bellow): 

make test

Running the server:
-------------------
The CogServer provides a simple server interface to the reasoning
system.

See CommandRequestProcessor.cc as an example control interface to
the server.  This command processor understands 3 simple commands:
load <xml file name>, ls and shutdown. There is an example XML file
under test/CogServer/atomSpace.xml

To run a simple test, build everything and execute
bin/src/CogServer/cogServer.  From another terminal, run
"telnet localhost 17001". Try loading the example XML file and ls
to see all the nodes and links.


Config file
-----------
The operation of the server can be altered by means of a config file.
This config file is in lib/opencog.conf. To make use of it, say 
"cogserver -c <config-filename>" when starting the server.

Scheme shell
------------
The cog server also includes a built-in scheme shell. The shell can be
started by typing "scm" after entering the opencog server shell. It can
be exited by placing a single . on a line by itself.  This shell allows
opencog atoms and truth values to be created, manipulated and destroyed
using a very simple but powerful interface.  Examples and documentation
for the available OpenCog commands can be found in src/guile/README.


Modifying the list of basic types
---------------------------------
At this time, the types are hard-coded (this should be fixed someday).
To build a new set of types, cd to src/AtomSpace, edit type.script
and then say "make", in that directory.  The makefile there will 
automatically build the new header files that define the types.


ToDo
----
Get cmake to automatically search for and detect cxxtest
(and complain when its missing)

Some useful CMake's web sites/pages: 

 - http://www.cmake.org (main page) 
 - http://www.cmake.org/Wiki/CMake_Useful_Variables 
 - http://www.cmake.org/Wiki/CMake_Useful_Variables/Get_Variables_From_CMake_Dashboards
 - http://www.cmake.org/Wiki/CMakeMacroAddCxxTest
 - http://www.cmake.org/Wiki/CMake_HowToFindInstalledSoftware


